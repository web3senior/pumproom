import OpenAI from 'openai'
import Web3 from 'web3'
import LSP7ABI from '../../app/abi/lsp7.json'
import ARFIAirdropABI from '../../app/abi/airdrop.json'
import { ethers } from 'ethers'

const openai = new OpenAI({
  dangerouslyAllowBrowser: false,
  apiKey: process.env.OPENAI_API_KEY,
})

const airdropContractAddress = '0x69a7373E94fE85256f104Bf327b6D3d9ca81c08E'

let messages = [
  {
    role: 'system',
    content: `Use LUKSO in uppercase in all instances, including hashtags.`,
  },
  {
    role: 'system',
    content: `Your name is PumpRoom and you can create LUKSO LSP7 token and deploy it on LUKSO blockchain. In order to 
    create LSP7 you need to ask for token Name, Symbol, Total Supply and wallet address to transfer ownership of deployed token.`,
  },
  {
    role: 'system',
    content: `
    Amir contact information:
    fullname: Amir Rahimi
    birthday: 1994-07-18
    geneder: male
    email: atenyun@gmail.com
    telegram id: @atenyun
    twitter: @atenyun
    generate a link for my telegram & twitter id
    `,
  },
  {
    role: 'system',
    content: `Your email address is pumproom@aratta.dev`,
  },
  {
    role: 'system',
    content: `you know annelisa her bio: social & mktg @lukso_io + @luksofoundation ðŸ’• || web3 hackathons @buidlbox ðŸŒ± || also a dj`,
  },
  {
    role: 'system',
    content: `Link the all transactions hash e.g. https://explorer.lukso.network/tx/[TX]`,
  },
  {
    role: 'system',
    content: `In order to read users wallet address ask them to connect their wallet to the DApp.`,
  },
]

let tools = [
  {
    type: 'function',
    function: {
      name: 'create_token',
      description: `Create LSP7 token on LUKSO`,
      parameters: {
        type: 'object',
        properties: {
          wallet: {
            type: 'string',
            description: `Wallet address to transfer ownership of the deployed token.`,
          },
          name: {
            type: 'string',
            description: `Token name`,
          },
          symbol: {
            type: 'string',
            description: `Token symbol`,
          },
          supply: {
            type: 'number',
            description: `Total supply`,
          },
        },
        required: ['wallet', 'name', 'symbol', 'supply'],
        additionalProperties: false,
      },
      strict: true,
    },
  },
  {
    type: 'function',
    function: {
      name: 'get_total_holder',
      description: 'Count of token holders. Total holders of a token',
      parameters: {
        type: 'object',
        properties: {
          contract: {
            type: 'string',
            description: 'Starts with 0x e.g. 0xf76253bddf123543716092e77fc08ba81d63ff38. Default value is 0xf76253bddf123543716092e77fc08ba81d63ff38',
          },
        },
        required: ['contract'],
        additionalProperties: false,
      },
      strict: false,
    },
  },
  {
    type: 'function',
    function: {
      name: 'get_lsp7',
      description: 'search tokens info, holders, whales by contract address. Convert numbers from WEI to ETH',
      parameters: {
        type: 'object',
        properties: {
          contract: {
            type: 'string',
            description: 'Starts with 0x e.g. 0xf76253bddf123543716092e77fc08ba81d63ff38',
          },
        },
        required: ['contract'],
        additionalProperties: false,
      },
      strict: false,
    },
  },
  {
    type: 'function',
    function: {
      name: 'search_profile',
      description: 'search and find profiles by a name or wallet address with 42 character length start with 0x like 0x6f77D2853dC02e1cF6fF5AF17040B3b6abBD2dca and make it precise',
      parameters: {
        type: 'object',
        properties: {
          wallet: {
            type: 'string',
            description: 'Profile username, name or wallet address which starts with 0x e.g. 0x6f77D2853dC02e1cF6fF5AF17040B3b6abBD2dca',
          },
        },
        required: ['wallet'],
        additionalProperties: false,
      },
      strict: true,
    },
  },
]

async function create_token(args) {
  // owner, name, symbol, supply
  console.log(`Parameters => `, args)
  if (args.wallet === `null`) return { result: false, data: `You need to connect your wallet and retry!` }

  const RPC_ENDPOINT = 'https://rpc.testnet.lukso.network'
  const web3 = new Web3(RPC_ENDPOINT)
  const privateKey = '0xf8ede5f13b521b2b97939b657c1b1afc4ee3c1185d644b4451b995e5eb3763d0'
  const account = web3.eth.accounts.privateKeyToAccount(privateKey)

  const lsp7Contract = new web3.eth.Contract(LSP7ABI)
  // const tokenToAirdrop = new web3.eth.Contract(LSP7ABI, '0x39f73b9c8d4e370fd9ff22c932ed58009680aff0')

  // Check if user is claimed the token already
  //const isWalletCliamed = web3.utils.toNumber(await airdropContract.methods.claimed(wallet).call())
  //console.log(`isWalletCliamed => `, isWalletCliamed > 0 ? 'yes' : 'no')
  //if (isWalletCliamed > 0) return { result: false, data: `This user is cliamed its fish already` }
  // console.log(await tokenToAirdrop.methods.balanceOf(airdropContractAddress).call(), `ether`))
  try {
    const contractDeployer = lsp7Contract.deploy({
      data:
        `0x` +
        `608060405234801561000f575f5ffd5b5060405161316238038061316283398101604081905261002e91610673565b8282335f80848484838084848483818061005b576040516306b620db60e21b815260040160405180910390fd5b610064816101c6565b506040805180820190915260048152632936598960e21b60208201526100ab907feafec4d89fa9619884b60000a4d96624a38f7ac2d8d9a604ecf07c12c77e480c90610230565b6100d57fdeba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af185610230565b6100ff7f2f0a68ab07768e01943a599e73362a0e17a63a72e94dd2e384d2c1d4db93275684610230565b6040805160208101839052610146917fe0261fa95db2eb3b5439bd033cda66d56b96f92f243a8228fd87550ed7bdfdb3910160408051601f19818403018152919052610230565b50506002805460ff1916931515939093179092555061016f995061028498505050505050505050565b61017a90600a6107d7565b61018490826107e5565b6007556101be33610193610284565b61019e90600a6107d7565b6101a890846107e5565b60408051602081019091525f815260019061029b565b505050610a57565b5f546001600160a01b0382811691161461022d575f80546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35f80546001600160a01b0319166001600160a01b0383161790555b50565b5f8281526001602052604090206102478282610878565b50817fece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2826040516102789190610960565b60405180910390a25050565b6002545f9060ff166102965750601290565b505f90565b6102a36102b5565b6102af848484846102f7565b50505050565b336102c75f546001600160a01b031690565b6001600160a01b0316146102f55760405163bf1169c560e01b81523360048201526024015b60405180910390fd5b565b6007548361030460035490565b61030e9190610972565b111561033c57600354600754604051633dc729a760e01b8152600481019290925260248201526044016102ec565b6102af848484846001600160a01b03841661036a57604051630d2d5ec360e41b815260040160405180910390fd5b8260035f82825461037b9190610972565b90915550506001600160a01b0384165f90815260046020526040812080548592906103a7908490610972565b90915550506040516001600160a01b038516905f9033907f3997e418d2cef0b3b0e907b1e39605c3f7d32dbd061e82ea5b4a770d46a160a6906103ef90889088908890610985565b60405180910390a45f335f8686856040516020016104119594939291906109ae565b60408051601f19818403018152919052905061042e858483610435565b5050505050565b61044683631aed5a8560e21b61053d565b156104db57604051631aed5a8560e21b81526001600160a01b03841690636bb56a1490610499907f20804611b3e2ea21c480dc465142210acf4a2485947541770ec1fb87dee4a55c9085906004016109f3565b5f604051808303815f875af11580156104b4573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526102af9190810190610a13565b81610538576001600160a01b0383163b15610514576040516353047ddb60e11b81526001600160a01b03841660048201526024016102ec565b6040516309b091fd60e21b81526001600160a01b03841660048201526024016102ec565b505050565b604080516001600160e01b03198316602480830191909152825180830390910181526044909101909152602080820180516001600160e01b03166301ffc9a760e01b17815282515f9392849283928392918391908a617530fa92503d91505f5190508280156105ad575060208210155b80156105b857505f81115b9450505050505b92915050565b634e487b7160e01b5f52604160045260245ffd5b5f806001600160401b038411156105f2576105f26105c5565b50604051601f19601f85018116603f011681018181106001600160401b0382111715610620576106206105c5565b604052838152905080828401851015610637575f5ffd5b8383602083015e5f60208583010152509392505050565b5f82601f83011261065d575f5ffd5b61066c838351602085016105d9565b9392505050565b5f5f5f60608486031215610685575f5ffd5b83516001600160401b0381111561069a575f5ffd5b6106a68682870161064e565b602086015190945090506001600160401b038111156106c3575f5ffd5b6106cf8682870161064e565b925050604084015190509250925092565b634e487b7160e01b5f52601160045260245ffd5b6001815b600184111561072f57808504811115610713576107136106e0565b600184161561072157908102905b60019390931c9280026106f8565b935093915050565b5f82610745575060016105bf565b8161075157505f6105bf565b816001811461076757600281146107715761078d565b60019150506105bf565b60ff841115610782576107826106e0565b50506001821b6105bf565b5060208310610133831016604e8410600b84101617156107b0575081810a6105bf565b6107bc5f1984846106f4565b805f19048211156107cf576107cf6106e0565b029392505050565b5f61066c60ff841683610737565b80820281158282048414176105bf576105bf6106e0565b600181811c9082168061081057607f821691505b60208210810361082e57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561053857805f5260205f20601f840160051c810160208510156108595750805b601f840160051c820191505b8181101561042e575f8155600101610865565b81516001600160401b03811115610891576108916105c5565b6108a58161089f84546107fc565b84610834565b6020601f8211600181146108d7575f83156108c05750848201515b5f19600385901b1c1916600184901b17845561042e565b5f84815260208120601f198516915b8281101561090657878501518255602094850194600190920191016108e6565b508482101561092357868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f61066c6020830184610932565b808201808211156105bf576105bf6106e0565b8381528215156020820152606060408201525f6109a56060830184610932565b95945050505050565b6001600160a01b0386811682528581166020830152841660408201526060810183905260a0608082018190525f906109e890830184610932565b979650505050505050565b828152604060208201525f610a0b6040830184610932565b949350505050565b5f60208284031215610a23575f5ffd5b81516001600160401b03811115610a38575f5ffd5b8201601f81018413610a48575f5ffd5b610a0b848251602084016105d9565b6126fe80610a645f395ff3fe608060405260043610610143575f3560e01c806370a08231116100b55780638da5cb5b1161006e5780638da5cb5b14610416578063979024211461043c578063b49506fd1461044f578063d72fc29a1461046e578063dedff9c61461049a578063f2fde38b146104b95761019c565b806370a082311461035e578063715018a6146103925780637580d920146103a6578063760d9bba146103c557806378381670146103e45780637f23690c146104035761019c565b8063313ce56711610107578063313ce5671461028d57806344d17187146102b357806352058d8a146102d257806354f6127f146102e757806365aeaa95146103135780636963d438146103325761019c565b806301ffc9a7146101dc57806318160ddd146102105780632bc1da821461022e5780632d7667c91461024f57806330d0dc371461026e5761019c565b3661019c57345f036101835760405163e5099ee360e01b815260040161017a9060208082526004908201525f604082015260600190565b60405180910390fd5b604051630e23d6b760e21b815260040160405180910390fd5b5f36606060048210156101c657828260405163e5099ee360e01b815260040161017a929190611ae0565b6101d083836104d8565b80519350602001915050f35b3480156101e7575f5ffd5b506101fb6101f6366004611b0e565b6105c7565b60405190151581526020015b60405180910390f35b34801561021b575f5ffd5b506003545b604051908152602001610207565b348015610239575f5ffd5b5061024d610248366004611c0c565b6105fa565b005b34801561025a575f5ffd5b5061024d610269366004611e36565b610686565b348015610279575f5ffd5b5061024d610288366004611f14565b610774565b348015610298575f5ffd5b506102a1610819565b60405160ff9091168152602001610207565b3480156102be575f5ffd5b5061024d6102cd366004611c0c565b610830565b3480156102dd575f5ffd5b5061022060075481565b3480156102f2575f5ffd5b50610306610301366004611f7e565b61085b565b6040516102079190611fc3565b34801561031e575f5ffd5b5061022061032d366004611fd5565b610866565b34801561033d575f5ffd5b5061035161034c366004612006565b6108c9565b6040516102079190612075565b348015610369575f5ffd5b506102206103783660046120d8565b6001600160a01b03165f9081526004602052604090205490565b34801561039d575f5ffd5b5061024d6109fa565b3480156103b1575f5ffd5b5061024d6103c03660046120f1565b610a0d565b3480156103d0575f5ffd5b5061024d6103df366004612122565b610a21565b3480156103ef575f5ffd5b5061024d6103fe366004612188565b610a49565b61024d6104113660046121d3565b610b12565b348015610421575f5ffd5b505f546040516001600160a01b039091168152602001610207565b61024d61044a366004612216565b610b47565b34801561045a575f5ffd5b5061024d610469366004611c0c565b610c00565b348015610479575f5ffd5b5061048d6104883660046120d8565b610c3f565b604051610207919061226f565b3480156104a5575f5ffd5b506103516104b43660046122ba565b610c62565b3480156104c4575f5ffd5b5061024d6104d33660046120d8565b610d0b565b60605f6104ef5f356001600160e01b031916610d46565b5090506001600160a01b0381166105265760405163bb370b2b60e01b81526001600160e01b03195f3516600482015260240161017a565b5f5f826001600160a01b0316348787333460405160200161054a94939291906122eb565b60408051601f198184030181529082905261056491612316565b5f6040518083038185875af1925050503d805f811461059e576040519150601f19603f3d011682016040523d82523d5f602084013e6105a3565b606091505b509150915081156105b85792506105c1915050565b80518060208301fd5b92915050565b5f6001600160e01b031982166318a5ac0160e31b14806105eb57506105eb82610dc2565b806105c157506105c182610de6565b5f6106058433610866565b9050805f036106325760405163cba6e97760e01b81526001600160a01b038516600482015260240161017a565b5f61063d8483612340565b905061064d338683600187610e22565b5f33828560405160200161066393929190612353565b604051602081830303815290604052905061067e8682610f92565b505050505050565b8451845181141580610699575083518114155b806106a5575082518114155b806106b1575081518114155b156106cf5760405163263eee8d60e01b815260040160405180910390fd5b5f5b8181101561076b576107638782815181106106ee576106ee612382565b602002602001015187838151811061070857610708612382565b602002602001015187848151811061072257610722612382565b602002602001015187858151811061073c5761073c612382565b602002602001015187868151811061075657610756612382565b6020026020010151610a21565b6001016106d1565b50505050505050565b336001600160a01b038416148015906107965750336001600160a01b03851614155b156107cd57604051630d292d9960e11b81523360048201526001600160a01b0380851660248301528516604482015260640161017a565b6107da83855f8585610e22565b8115610813575f835f836040516020016107f693929190612396565b60405160208183030381529060405290506108118582610f92565b505b50505050565b6002545f9060ff1661082b5750601290565b505f90565b336001600160a01b0384161461084b5761084b338484610fbd565b610856838383611048565b505050565b60606105c182611183565b5f826001600160a01b0316826001600160a01b03160361089e57506001600160a01b0381165f908152600460205260409020546105c1565b506001600160a01b038082165f908152600660209081526040808320938616835292905220546105c1565b6060816001600160401b038111156108e3576108e3611b50565b60405190808252806020026020018201604052801561091657816020015b60608152602001906001900390816109015790505b5090505f5b828110156109f3575f803086868581811061093857610938612382565b905060200281019061094a91906123c2565b60405161095892919061240b565b5f60405180830381855af49150503d805f8114610990576040519150601f19603f3d011682016040523d82523d5f602084013e610995565b606091505b5091509150816109cb578051156109af5780518082602001fd5b604051632ddd30a160e21b81526004810184905260240161017a565b808484815181106109de576109de612382565b6020908102919091010152505060010161091b565b5092915050565b610a02611222565b610a0b5f61125d565b565b610a15611222565b610813848484846112c8565b336001600160a01b03861614610a3c57610a3c338685610fbd565b6108118585858585611319565b336001600160a01b03841614801590610a6b5750336001600160a01b03851614155b15610aa2576040516398ce294560e01b81523360048201526001600160a01b0380851660248301528516604482015260640161017a565b5f610aad8585610866565b905082811015610ad057604051630ef76c3560e01b815260040160405180910390fd5b828103610ae1858783600187610e22565b5f858285604051602001610af793929190612353565b604051602081830303815290604052905061076b8782610f92565b610b1a611222565b3415610b395760405163f36ba73760e01b815260040160405180910390fd5b610b438282611499565b5050565b610b4f611222565b3415610b6e5760405163f36ba73760e01b815260040160405180910390fd5b8051825114610b9057604051633bcc897960e01b815260040160405180910390fd5b81515f03610bb1576040516397da5f9560e01b815260040160405180910390fd5b5f5b825181101561085657610bf8838281518110610bd157610bd1612382565b6020026020010151838381518110610beb57610beb612382565b6020026020010151611499565b600101610bb3565b610c0e338484600185610e22565b5f338383604051602001610c2493929190612353565b60405160208183030381529060405290506108138482610f92565b6001600160a01b0381165f9081526005602052604090206060906105c1906114a3565b606081516001600160401b03811115610c7d57610c7d611b50565b604051908082528060200260200182016040528015610cb057816020015b6060815260200190600190039081610c9b5790505b5090505f5b8251811015610d0557610ce0838281518110610cd357610cd3612382565b6020026020010151611183565b828281518110610cf257610cf2612382565b6020908102919091010152600101610cb5565b50919050565b610d13611222565b6001600160a01b038116610d3a576040516306b620db60e21b815260040160405180910390fd5b610d438161125d565b50565b5f8080610d6a696773c5a04a6d4300884b60b11b6001600160e01b031986166114af565b90505f610d7682611183565b90508051601414158015610d8a5750805115155b15610daa57806040516342bfe79f60e01b815260040161017a9190611fc3565b610db38161241a565b60601c95600195509350505050565b5f6001600160e01b0319821663a918fa6b60e01b14806105c157506105c182611502565b5f80610df86301ffc9a760e01b610d46565b5090506001600160a01b038116610e1157505f92915050565b610e1b8184611536565b9392505050565b6001600160a01b038416610e49576040516331aaf3b360e11b815260040160405180910390fd5b846001600160a01b0316846001600160a01b031603610e7b5760405163dab7504760e01b815260040160405180910390fd5b6001600160a01b038086165f9081526006602090815260408083209388168352929052208390558215610f1b576001600160a01b0385165f908152600560205260409020610ec990856115bc565b5082856001600160a01b0316856001600160a01b03167ff772a43bfdf4729b196e3fb54a818b91a2ca6c49d10b2e16278752f9f515c25d84604051610f0e9190611fc3565b60405180910390a4610811565b6001600160a01b0385165f908152600560205260409020610f3c90856115d0565b50811515856001600160a01b0316856001600160a01b03167f0ebf5762d8855cbe012d2ca42fb33a81175e17c8a8751f8859931ba453bd416784604051610f839190611fc3565b60405180910390a45050505050565b610b43827f386072cc5a58e61263b434c722725f21031cd06e7c552cfaa06db5de8a320dbc836115e4565b6001600160a01b038083165f90815260066020908152604080832093871683529290522054808211156110245760405163f3a6b69160e01b81526001600160a01b03808516600483015260248201839052851660448201526064810183905260840161017a565b61081383856110338585612468565b5f60405180602001604052805f815250610e22565b6001600160a01b03831661106f57604051630d2d5ec360e41b815260040160405180910390fd5b6001600160a01b0383165f90815260046020526040902054808311156110c1576040516308d4794960e01b8152600481018290526001600160a01b03851660248201526044810184905260640161017a565b8260035f8282546110d29190612468565b90915550506001600160a01b0384165f90815260046020526040812080548592906110fe908490612468565b90915550506040515f906001600160a01b0386169033907f3997e418d2cef0b3b0e907b1e39605c3f7d32dbd061e82ea5b4a770d46a160a6906111469088908690899061247b565b60405180910390a45f33855f868660405160200161116895949392919061249b565b60405160208183030381529060405290506108118582611673565b5f81815260016020526040902080546060919061119f906124d5565b80601f01602080910402602001604051908101604052809291908181526020018280546111cb906124d5565b80156112165780601f106111ed57610100808354040283529160200191611216565b820191905f5260205f20905b8154815290600101906020018083116111f957829003601f168201915b50505050509050919050565b336112345f546001600160a01b031690565b6001600160a01b031614610a0b5760405163bf1169c560e01b815233600482015260240161017a565b5f546001600160a01b03828116911614610d43575f80546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35f80546001600160a01b0383166001600160a01b031990911617905550565b600754836112d560035490565b6112df9190612340565b111561130d57600354600754604051633dc729a760e01b81526004810192909252602482015260440161017a565b6108138484848461169e565b6001600160a01b038516158061133657506001600160a01b038416155b1561135457604051630d2d5ec360e41b815260040160405180910390fd5b6001600160a01b0385165f90815260046020526040902054808411156113a6576040516308d4794960e01b8152600481018290526001600160a01b03871660248201526044810185905260640161017a565b6001600160a01b0386165f90815260046020526040812080548692906113cd908490612468565b90915550506001600160a01b0385165f90815260046020526040812080548692906113f9908490612340565b92505081905550846001600160a01b0316866001600160a01b0316336001600160a01b03167f3997e418d2cef0b3b0e907b1e39605c3f7d32dbd061e82ea5b4a770d46a160a68787876040516114519392919061247b565b60405180910390a45f338787878660405160200161147395949392919061249b565b604051602081830303815290604052905061148e8782611673565b61076b868583611784565b610b438282611845565b60605f610e1b83611959565b604080516001600160b01b0319841660208201525f602a82018190526001600160601b03198416602c830152918291016040516020818303038152906040529050806114fa90612507565b949350505050565b5f6001600160e01b031982166318a6a9a560e21b14806105c157506301ffc9a760e01b6001600160e01b03198316146105c1565b604080516001600160e01b03198316602480830191909152825180830390910181526044909101909152602080820180516001600160e01b03166301ffc9a760e01b17815282515f9392849283928392918391908a617530fa92503d91505f5190508280156115a6575060208210155b80156115b157505f81115b979650505050505050565b5f610e1b836001600160a01b0384166119b1565b5f610e1b836001600160a01b0384166119fd565b6115fe6001600160a01b038416631aed5a8560e21b611536565b1561085657604051631aed5a8560e21b81526001600160a01b03841690636bb56a1490611631908590859060040161252a565b5f604051808303815f875af115801561164c573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526108139190810190612542565b610b43827f429ac7a06903dbc9c13dfcb3c9d11df8194581fa047c96d7a4171fc7402958ea836115e4565b6001600160a01b0384166116c557604051630d2d5ec360e41b815260040160405180910390fd5b8260035f8282546116d69190612340565b90915550506001600160a01b0384165f9081526004602052604081208054859290611702908490612340565b90915550506040516001600160a01b038516905f9033907f3997e418d2cef0b3b0e907b1e39605c3f7d32dbd061e82ea5b4a770d46a160a69061174a9088908890889061247b565b60405180910390a45f335f86868560405160200161176c95949392919061249b565b60405160208183030381529060405290506108118584835b61179583631aed5a8560e21b611536565b156117e857604051631aed5a8560e21b81526001600160a01b03841690636bb56a1490611631907f20804611b3e2ea21c480dc465142210acf4a2485947541770ec1fb87dee4a55c90859060040161252a565b81610856576001600160a01b0383163b15611821576040516353047ddb60e11b81526001600160a01b038416600482015260240161017a565b6040516309b091fd60e21b81526001600160a01b038416600482015260240161017a565b7f2145e1d6d074577dc71ef54c3807742b41b053a9352ae6b491331509acb9750f8201611885576040516385c169bd60e01b815260040160405180910390fd5b7fd0f59754f88971fe6bc5a6618cc9d5f1e859c58d16b22d1c7b2d3e2b246cd8aa82016118c557604051630eceab6760e31b815260040160405180910390fd5b7f1fd9e056a24d14c4abc642fcc325992a946906d0dbc57dd70278aaf12842024d820161190557604051634ef6d7fb60e01b815260040160405180910390fd5b5f82815260016020526040902061191c82826125fa565b50817fece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b28260405161194d9190611fc3565b60405180910390a25050565b6060815f0180548060200260200160405190810160405280929190818152602001828054801561121657602002820191905f5260205f20905b8154815260200190600101908083116119925750505050509050919050565b5f8181526001830160205260408120546119f657508154600181810184555f8481526020808220909301849055845484825282860190935260409020919091556105c1565b505f6105c1565b5f8181526001830160205260408120548015611ad7575f611a1f600183612468565b85549091505f90611a3290600190612468565b9050818114611a91575f865f018281548110611a5057611a50612382565b905f5260205f200154905080875f018481548110611a7057611a70612382565b5f918252602080832090910192909255918252600188019052604090208390555b8554869080611aa257611aa26126b4565b600190038181905f5260205f20015f90559055856001015f8681526020019081526020015f205f9055600193505050506105c1565b5f9150506105c1565b60208152816020820152818360408301375f818301604090810191909152601f909201601f19160101919050565b5f60208284031215611b1e575f5ffd5b81356001600160e01b031981168114610e1b575f5ffd5b80356001600160a01b0381168114611b4b575f5ffd5b919050565b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f191681016001600160401b0381118282101715611b8c57611b8c611b50565b604052919050565b5f6001600160401b03821115611bac57611bac611b50565b50601f01601f191660200190565b5f82601f830112611bc9575f5ffd5b8135611bdc611bd782611b94565b611b64565b818152846020838601011115611bf0575f5ffd5b816020850160208301375f918101602001919091529392505050565b5f5f5f60608486031215611c1e575f5ffd5b611c2784611b35565b92506020840135915060408401356001600160401b03811115611c48575f5ffd5b611c5486828701611bba565b9150509250925092565b5f6001600160401b03821115611c7657611c76611b50565b5060051b60200190565b5f82601f830112611c8f575f5ffd5b8135611c9d611bd782611c5e565b8082825260208201915060208360051b860101925085831115611cbe575f5ffd5b602085015b83811015611ce257611cd481611b35565b835260209283019201611cc3565b5095945050505050565b5f82601f830112611cfb575f5ffd5b8135611d09611bd782611c5e565b8082825260208201915060208360051b860101925085831115611d2a575f5ffd5b602085015b83811015611ce2578035835260209283019201611d2f565b80358015158114611b4b575f5ffd5b5f82601f830112611d65575f5ffd5b8135611d73611bd782611c5e565b8082825260208201915060208360051b860101925085831115611d94575f5ffd5b602085015b83811015611ce257611daa81611d47565b835260209283019201611d99565b5f82601f830112611dc7575f5ffd5b8135611dd5611bd782611c5e565b8082825260208201915060208360051b860101925085831115611df6575f5ffd5b602085015b83811015611ce25780356001600160401b03811115611e18575f5ffd5b611e27886020838a0101611bba565b84525060209283019201611dfb565b5f5f5f5f5f60a08688031215611e4a575f5ffd5b85356001600160401b03811115611e5f575f5ffd5b611e6b88828901611c80565b95505060208601356001600160401b03811115611e86575f5ffd5b611e9288828901611c80565b94505060408601356001600160401b03811115611ead575f5ffd5b611eb988828901611cec565b93505060608601356001600160401b03811115611ed4575f5ffd5b611ee088828901611d56565b92505060808601356001600160401b03811115611efb575f5ffd5b611f0788828901611db8565b9150509295509295909350565b5f5f5f5f60808587031215611f27575f5ffd5b611f3085611b35565b9350611f3e60208601611b35565b9250611f4c60408601611d47565b915060608501356001600160401b03811115611f66575f5ffd5b611f7287828801611bba565b91505092959194509250565b5f60208284031215611f8e575f5ffd5b5035919050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f610e1b6020830184611f95565b5f5f60408385031215611fe6575f5ffd5b611fef83611b35565b9150611ffd60208401611b35565b90509250929050565b5f5f60208385031215612017575f5ffd5b82356001600160401b0381111561202c575f5ffd5b8301601f8101851361203c575f5ffd5b80356001600160401b03811115612051575f5ffd5b8560208260051b8401011115612065575f5ffd5b6020919091019590945092505050565b5f602082016020835280845180835260408501915060408160051b8601019250602086015f5b828110156120cc57603f198786030184526120b7858351611f95565b9450602093840193919091019060010161209b565b50929695505050505050565b5f602082840312156120e8575f5ffd5b610e1b82611b35565b5f5f5f5f60808587031215612104575f5ffd5b61210d85611b35565b935060208501359250611f4c60408601611d47565b5f5f5f5f5f60a08688031215612136575f5ffd5b61213f86611b35565b945061214d60208701611b35565b93506040860135925061216260608701611d47565b915060808601356001600160401b0381111561217c575f5ffd5b611f0788828901611bba565b5f5f5f5f6080858703121561219b575f5ffd5b6121a485611b35565b93506121b260208601611b35565b92506040850135915060608501356001600160401b03811115611f66575f5ffd5b5f5f604083850312156121e4575f5ffd5b8235915060208301356001600160401b03811115612200575f5ffd5b61220c85828601611bba565b9150509250929050565b5f5f60408385031215612227575f5ffd5b82356001600160401b0381111561223c575f5ffd5b61224885828601611cec565b92505060208301356001600160401b03811115612263575f5ffd5b61220c85828601611db8565b602080825282518282018190525f918401906040840190835b818110156122af5783516001600160a01b0316835260209384019390920191600101612288565b509095945050505050565b5f602082840312156122ca575f5ffd5b81356001600160401b038111156122df575f5ffd5b6114fa84828501611cec565b8385823760609290921b6001600160601b031916919092019081526014810191909152603401919050565b5f82518060208501845e5f920191825250919050565b634e487b7160e01b5f52601160045260245ffd5b808201808211156105c1576105c161232c565b60018060a01b0384168152826020820152606060408201525f6123796060830184611f95565b95945050505050565b634e487b7160e01b5f52603260045260245ffd5b6001600160a01b038416815260ff831660208201526060604082018190525f9061237990830184611f95565b5f5f8335601e198436030181126123d7575f5ffd5b8301803591506001600160401b038211156123f0575f5ffd5b602001915036819003821315612404575f5ffd5b9250929050565b818382375f9101908152919050565b805160208201516001600160601b0319811691906014821015612461576bffffffffffffffffffffffff196bffffffffffffffffffffffff198360140360031b1b82161692505b5050919050565b818103818111156105c1576105c161232c565b8381528215156020820152606060408201525f6123796060830184611f95565b6001600160a01b0386811682528581166020830152841660408201526060810183905260a0608082018190525f906115b190830184611f95565b600181811c908216806124e957607f821691505b602082108103610d0557634e487b7160e01b5f52602260045260245ffd5b80516020808301519190811015610d05575f1960209190910360031b1b16919050565b828152604060208201525f6114fa6040830184611f95565b5f60208284031215612552575f5ffd5b81516001600160401b03811115612567575f5ffd5b8201601f81018413612577575f5ffd5b8051612585611bd782611b94565b818152856020838501011115612599575f5ffd5b8160208401602083015e5f91810160200191909152949350505050565b601f82111561085657805f5260205f20601f840160051c810160208510156125db5750805b601f840160051c820191505b81811015610811575f81556001016125e7565b81516001600160401b0381111561261357612613611b50565b6126278161262184546124d5565b846125b6565b6020601f821160018114612659575f83156126425750848201515b5f19600385901b1c1916600184901b178455610811565b5f84815260208120601f198516915b828110156126885787850151825560209485019460019092019101612668565b50848210156126a557868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b634e487b7160e01b5f52603160045260245ffdfea26469706673582212207db0f80e87e4e0d5c40b91f658cc84d5da87e3426c7b59a74ad3fdccfe8ead0b64736f6c634300081c0033`,
      arguments: [args.name, args.symbol, args.supply],
    })

    const gas = await contractDeployer.estimateGas({
      from: account.address,
    })
    console.log('Estimated gas:', gas)

    const suggestion_gas = await web3.eth.getGasPrice()

    const deployResult = await web3.eth.accounts.signTransaction(
      {
        from: account.address,
        // to: airdropContractAddress,
        gasPrice: web3.utils.toHex(suggestion_gas),
        data: contractDeployer.encodeABI(),
      },
      privateKey
    )

    const res = await web3.eth.sendSignedTransaction(deployResult.rawTransaction)
    console.log(res)

    const tokenAddress = res.logs[0].address

    // Transfer ownership
    const deployedTokenContract = new web3.eth.Contract(LSP7ABI, tokenAddress)
    const transferOwnershipResult = await web3.eth.accounts.signTransaction(
      {
        from: account.address,
        to: tokenAddress,
        gasPrice: web3.utils.toHex(suggestion_gas),
        data: deployedTokenContract.methods.transferOwnership(args.wallet).encodeABI(),
      },
      privateKey
    )
    const transferOwnershipRes = await web3.eth.sendSignedTransaction(transferOwnershipResult.rawTransaction)
    console.log('=>>>>>', transferOwnershipRes)

    return { result: true, data: `Here is the TX hash ${res.logs[0].transactionHash} & contract address: ${tokenAddress}` }
  } catch (error) {
    return { result: false, data: error }
  }
}

async function get_total_holder(contract) {
  console.log(contract)
  let myHeaders = new Headers()
  myHeaders.append('Content-Type', `application/json`)
  myHeaders.append('Accept', `application/json`)

  let requestOptions = {
    method: 'POST',
    headers: myHeaders,
    body: JSON.stringify({
      query: `query MyQuery {
  Asset(where: {id: {_eq: "${contract.toLowerCase()}"}}) {
    id
    isLSP7
    lsp4TokenName
    lsp4TokenSymbol
    lsp4TokenType
    name
    totalSupply
    owner_id
    holders(order_by: {balance: desc}) {
      balance
    }
    createdTimestamp
  }
}`,
    }),
  }

  const response = await fetch(`${process.env.LUKSO_API_ENDPOINT}`, requestOptions)
  if (!response.ok) {
    return { result: false, message: `Failed to fetch query` }
  }
  const data = await response.json()

  // Conver numbers from wei to eth
  if (data.data.Asset[0].holders) {
    return { result: true, total: data.data.Asset[0].holders.length }
  }

  return { result: false, message: `Failed to fetch query` }
}

async function get_lsp7(contract) {
  console.log(contract)
  let myHeaders = new Headers()
  myHeaders.append('Content-Type', `application/json`)
  myHeaders.append('Accept', `application/json`)

  let requestOptions = {
    method: 'POST',
    headers: myHeaders,
    body: JSON.stringify({
      query: `query MyQuery {
  Asset(where: {id: {_eq: "${contract.toLowerCase()}"}}) {
    id
    isLSP7
    lsp4TokenName
    lsp4TokenSymbol
    lsp4TokenType
    name
    totalSupply
    owner_id
    holders(order_by: {balance: desc}, limit: 10) {
      balance
      profile {
        id
        isEOA
        tags
        fullName
      }
      timestamp
    }
  }
}`,
    }),
  }

  const response = await fetch(`${process.env.LUKSO_API_ENDPOINT}`, requestOptions)
  if (!response.ok) {
    return { result: false, message: `Failed to fetch query` }
  }
  const data = await response.json()

  // Conver numbers from wei to eth
  if (data.data.Asset[0].totalSupply) {
    data.data.Asset[0].totalSupply = Web3.utils.fromWei(data.data.Asset[0].totalSupply, `ether`)

    data.data.Asset[0].holders.forEach((element, i) => {
      data.data.Asset[0].holders[i].balance = Web3.utils.fromWei(element.balance, `ether`)
    })
  }

  return data
}

async function search_profile(wallet) {
  let myHeaders = new Headers()
  myHeaders.append('Content-Type', `application/json`)
  myHeaders.append('Accept', `application/json`)

  let requestOptions = {
    method: 'POST',
    headers: myHeaders,
    body: JSON.stringify({
      query: `query MyQuery {
  search_profiles(args: {search: "${wallet}"}, limit: 3) {
    fullName
    id
    tags
    description
    links {
      title
      url
    }
  }
}`,
    }),
  }
  const response = await fetch(`${process.env.LUKSO_API_ENDPOINT}`, requestOptions)
  if (!response.ok) {
    return { result: false, message: `Failed to fetch query` }
  }
  const data = await response.json()
  return data
}

export default async function handler(req, res) {
  // console.log(req.body.old_messages)
  // console.log(req.body.profile)
  // console.log(req.body.messages)
  messages.push(req.body.profile)
  if (req.body.old_messages.length > 0) messages.push(...req.body.old_messages)

  messages.push(req.body.messages)

  try {
    const completion = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: messages,
      tools: tools,
    })

    console.log(`res => `, completion.choices[0].message)

    // Check if it needs to call a function/ call an API
    if (completion.choices[0].message.tool_calls && completion.choices[0].message.tool_calls.length > 0) {
      const toolCall = completion.choices[0].message.tool_calls[0]
      let result, completion2, args

      switch (completion.choices[0].message.tool_calls[0].function.name) {
        case 'create_token':
          console.log(`CREATE TOKEN`)
          args = JSON.parse(toolCall.function.arguments)
          console.log(args)
          result = await create_token(args)
          console.log(`result of create_token function => `, result)

          messages.push(completion.choices[0].message)

          messages.push({
            role: 'tool',
            tool_call_id: toolCall.id,
            content: JSON.stringify(result),
          })

          completion2 = await openai.chat.completions.create({
            model: 'gpt-4o-mini',
            messages,
            tools,
          })

          res.status(200).json({ output: completion2.choices[0].message })
          break
        case 'get_lsp7':
          args = JSON.parse(toolCall.function.arguments)
          result = await get_lsp7(args.contract)
          console.log(`get_lsp7 => `, result)
          messages.push(completion.choices[0].message)
          messages.push({
            role: 'tool',
            tool_call_id: toolCall.id,
            content: JSON.stringify(result),
          })
          completion2 = await openai.chat.completions.create({
            model: 'gpt-4o-mini',
            messages,
            tools,
          })
          res.status(200).json({ output: completion2.choices[0].message })
          break
        case 'get_total_holder':
          args = JSON.parse(toolCall.function.arguments)
          result = await get_total_holder(args.contract)
          console.log(`getTotalHolder => `, result)
          messages.push(completion.choices[0].message)
          messages.push({
            role: 'tool',
            tool_call_id: toolCall.id,
            content: JSON.stringify(result),
          })
          completion2 = await openai.chat.completions.create({
            model: 'gpt-4o-mini',
            messages,
            tools,
          })
          res.status(200).json({ output: completion2.choices[0].message })
          break
        case 'search_profile':
          args = JSON.parse(toolCall.function.arguments)
          result = await search_profile(args.wallet)
          console.log(result)

          messages.push(completion.choices[0].message) // append model's function call message
          messages.push({
            role: 'tool',
            tool_call_id: toolCall.id,
            content: JSON.stringify(result),
          })
          completion2 = await openai.chat.completions.create({
            model: 'gpt-4o-mini',
            messages,
            tools,
          })
          res.status(200).json({ output: completion2.choices[0].message })
          break
        default:
          res.status(200).json({ output: completion.choices[0].message })
          break
      }
    } else {
      res.status(200).json({ output: completion.choices[0].message })
    }
  } catch (err) {
    res.status(500).json({ error: 'failed to load data', message: err })
  }
}
