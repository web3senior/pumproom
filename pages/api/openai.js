import OpenAI from 'openai'
import Web3 from 'web3'
import LSP7ABI from '../../app/abi/lsp7.json'
import ARFIAirdropABI from '../../app/abi/airdrop.json'
import { ethers } from 'ethers'

// export const config = {
//   maxDuration: 60, // 5 seconds
// };
export const maxDuration = 60 // This function can run for a maximum of 5 seconds

const openai = new OpenAI({
  dangerouslyAllowBrowser: false,
  apiKey: process.env.OPENAI_API_KEY,
})

const airdropContractAddress = '0x69a7373E94fE85256f104Bf327b6D3d9ca81c08E'

let messages = [
  {
    role: 'system',
    content: `Use LUKSO in uppercase in all instances, including hashtags.`,
  },
  {
    role: 'system',
    content: `Your name is PumpRoom and you can create LUKSO LSP7 token and deploy it on LUKSO blockchain. In order to 
    create LSP7 you need to ask for token Name, Symbol, Total Supply and wallet address to transfer ownership of deployed token. After deploying the token provideo the all links about the token/ contract.`,
  },
  {
    role: 'system',
    content: `
    Amir contact information:
    Universal Profile address: https://profile.link/arattalabs@0D5C
    fullname: Amir Rahimi
    birthday: 1994-07-18
    geneder: male
    email: atenyun@gmail.com
    telegram id: @atenyun
    twitter: @atenyun
    generate a link for my telegram & twitter id
    `,
  },
  {
    role: 'system',
    content: `In order to read users wallet address ask them to connect their wallet to the DApp.`,
  },  

  {
    role: 'system',
    content: `Link the all transactions hash e.g. https://explorer.lukso.network/tx/[TX]`,
  },
  {
    role: 'system',
    content: `Link to contract on the explorer https://explorer.lukso.network/address/[CONTRACT_ADDRESS]`,
  },
  {
    role: 'system',
    content: `Link to add liquidity on Universal Swap https://universalswaps.io/add/[CONTRACT_ADDRESS]`,
  },
  {
    role: 'system',
    content: `Link to trade lsp7 token on Universal Swap https://universalswaps.io/tokens/lukso/[CONTRACT_ADDRESS]`,
  },

]

let tools = [
  {
    type: 'function',
    function: {
      name: 'create_token',
      description: `Create LSP7 token on LUKSO`,
      parameters: {
        type: 'object',
        properties: {
          wallet: {
            type: 'string',
            description: `Wallet address to transfer ownership of the deployed token.`,
          },
          name: {
            type: 'string',
            description: `Token name`,
          },
          symbol: {
            type: 'string',
            description: `Token symbol`,
          },
          supply: {
            type: 'number',
            description: `Total supply`,
          },
        },
        required: ['wallet', 'name', 'symbol', 'supply'],
        additionalProperties: false,
      },
      strict: true,
    },
  },
  {
    type: 'function',
    function: {
      name: 'get_total_holder',
      description: 'Count of token holders. Total holders of a token',
      parameters: {
        type: 'object',
        properties: {
          contract: {
            type: 'string',
            description: 'Starts with 0x e.g. 0xf76253bddf123543716092e77fc08ba81d63ff38. Default value is 0xf76253bddf123543716092e77fc08ba81d63ff38',
          },
        },
        required: ['contract'],
        additionalProperties: false,
      },
      strict: false,
    },
  },
  {
    type: 'function',
    function: {
      name: 'get_lsp7',
      description: 'search tokens info, holders, whales by contract address. Convert numbers from WEI to ETH',
      parameters: {
        type: 'object',
        properties: {
          contract: {
            type: 'string',
            description: 'Starts with 0x e.g. 0xf76253bddf123543716092e77fc08ba81d63ff38',
          },
        },
        required: ['contract'],
        additionalProperties: false,
      },
      strict: false,
    },
  },
  {
    type: 'function',
    function: {
      name: 'search_profile',
      description: 'search and find profiles by a name or wallet address with 42 character length start with 0x like 0x6f77D2853dC02e1cF6fF5AF17040B3b6abBD2dca and make it precise',
      parameters: {
        type: 'object',
        properties: {
          wallet: {
            type: 'string',
            description: 'Profile username, name or wallet address which starts with 0x e.g. 0x6f77D2853dC02e1cF6fF5AF17040B3b6abBD2dca',
          },
        },
        required: ['wallet'],
        additionalProperties: false,
      },
      strict: true,
    },
  },
]

async function create_token(args) {
  // owner, name, symbol, supply
  console.log(`Parameters => `, args)
  if (args.wallet === `null`) return { result: false, data: `You need to connect your wallet and retry!` }

  const RPC_ENDPOINT = 'https://rpc.mainnet.lukso.network'
  const web3 = new Web3(RPC_ENDPOINT)
  const privateKey = '0xf8ede5f13b521b2b97939b657c1b1afc4ee3c1185d644b4451b995e5eb3763d0'
  const account = web3.eth.accounts.privateKeyToAccount(privateKey)

  const lsp7Contract = new web3.eth.Contract(LSP7ABI)
  // const tokenToAirdrop = new web3.eth.Contract(LSP7ABI, '0x39f73b9c8d4e370fd9ff22c932ed58009680aff0')

  // Check if user is claimed the token already
  //const isWalletCliamed = web3.utils.toNumber(await airdropContract.methods.claimed(wallet).call())
  //console.log(`isWalletCliamed => `, isWalletCliamed > 0 ? 'yes' : 'no')
  //if (isWalletCliamed > 0) return { result: false, data: `This user is cliamed its fish already` }
  // console.log(await tokenToAirdrop.methods.balanceOf(airdropContractAddress).call(), `ether`))
  try {
    const contractDeployer = lsp7Contract.deploy({
      data:
        `0x` +
        ``,
      arguments: [args.name, args.symbol, args.supply],
    })

    const gas = await contractDeployer.estimateGas({
      from: account.address,
    })
    console.log('Estimated gas:', gas)

    const suggestion_gas = await web3.eth.getGasPrice()

    const deployResult = await web3.eth.accounts.signTransaction(
      {
        from: account.address,
        // to: airdropContractAddress,
        gasPrice: web3.utils.toHex(suggestion_gas),
        data: contractDeployer.encodeABI(),
      },
      privateKey
    )

    const res = await web3.eth.sendSignedTransaction(deployResult.rawTransaction)
    console.log(res)

    const tokenAddress = res.logs[0].address

    // New contract
    const deployedTokenContract = new web3.eth.Contract(LSP7ABI, tokenAddress)


    // Transfer token to the new owner
    const transferTokenResult = await web3.eth.accounts.signTransaction(
      {
        from: account.address,
        to: tokenAddress,
        gasPrice: web3.utils.toHex(suggestion_gas),
        data: deployedTokenContract.methods.transfer(account.address, args.wallet,web3.utils.toWei(args.supply, `ether`), true, '0x').encodeABI(),
      },
      privateKey
    )
    const transferTokenRes = await web3.eth.sendSignedTransaction(transferTokenResult.rawTransaction)
    console.log('Transfer Token', transferTokenRes)


    // Transfer ownership
    const transferOwnershipResult = await web3.eth.accounts.signTransaction(
      {
        from: account.address,
        to: tokenAddress,
        gasPrice: web3.utils.toHex(suggestion_gas),
        data: deployedTokenContract.methods.transferOwnership(args.wallet).encodeABI(),
      },
      privateKey
    )
    const transferOwnershipRes = await web3.eth.sendSignedTransaction(transferOwnershipResult.rawTransaction)
    console.log('Transfer Ownership', transferOwnershipRes)


    return { result: true, data: `Here is the TX hash ${res.logs[0].transactionHash} & contract address: ${tokenAddress}` }
  } catch (error) {
    return { result: false, data: error }
  }
}

async function get_total_holder(contract) {
  console.log(contract)
  let myHeaders = new Headers()
  myHeaders.append('Content-Type', `application/json`)
  myHeaders.append('Accept', `application/json`)

  let requestOptions = {
    method: 'POST',
    headers: myHeaders,
    body: JSON.stringify({
      query: `query MyQuery {
  Asset(where: {id: {_eq: "${contract.toLowerCase()}"}}) {
    id
    isLSP7
    lsp4TokenName
    lsp4TokenSymbol
    lsp4TokenType
    name
    totalSupply
    owner_id
    holders(order_by: {balance: desc}) {
      balance
    }
    createdTimestamp
  }
}`,
    }),
  }

  const response = await fetch(`${process.env.LUKSO_API_ENDPOINT}`, requestOptions)
  if (!response.ok) {
    return { result: false, message: `Failed to fetch query` }
  }
  const data = await response.json()

  // Conver numbers from wei to eth
  if (data.data.Asset[0].holders) {
    return { result: true, total: data.data.Asset[0].holders.length }
  }

  return { result: false, message: `Failed to fetch query` }
}

async function get_lsp7(contract) {
  console.log(contract)
  let myHeaders = new Headers()
  myHeaders.append('Content-Type', `application/json`)
  myHeaders.append('Accept', `application/json`)

  let requestOptions = {
    method: 'POST',
    headers: myHeaders,
    body: JSON.stringify({
      query: `query MyQuery {
  Asset(where: {id: {_eq: "${contract.toLowerCase()}"}}) {
    id
    isLSP7
    lsp4TokenName
    lsp4TokenSymbol
    lsp4TokenType
    name
    totalSupply
    owner_id
    holders(order_by: {balance: desc}, limit: 10) {
      balance
      profile {
        id
        isEOA
        tags
        fullName
      }
      timestamp
    }
  }
}`,
    }),
  }

  const response = await fetch(`${process.env.LUKSO_API_ENDPOINT}`, requestOptions)
  if (!response.ok) {
    return { result: false, message: `Failed to fetch query` }
  }
  const data = await response.json()

  // Conver numbers from wei to eth
  if (data.data && data.data.Asset[0].totalSupply) {
    data.data.Asset[0].totalSupply = Web3.utils.fromWei(data.data.Asset[0].totalSupply, `ether`)

    data.data.Asset[0].holders.forEach((element, i) => {
      data.data.Asset[0].holders[i].balance = Web3.utils.fromWei(element.balance, `ether`)
    })
  }

  return data
}

async function search_profile(wallet) {
  let myHeaders = new Headers()
  myHeaders.append('Content-Type', `application/json`)
  myHeaders.append('Accept', `application/json`)

  let requestOptions = {
    method: 'POST',
    headers: myHeaders,
    body: JSON.stringify({
      query: `query MyQuery {
  search_profiles(args: {search: "${wallet}"}, limit: 3) {
    fullName
    id
    tags
    description
    links {
      title
      url
    }
  }
}`,
    }),
  }
  const response = await fetch(`${process.env.LUKSO_API_ENDPOINT}`, requestOptions)
  if (!response.ok) {
    return { result: false, message: `Failed to fetch query` }
  }
  const data = await response.json()
  return data
}

export default async function handler(req, res) {
  console.log(req.body.old_messages)
  // console.log(req.body.profile)
  // console.log(req.body.messages)

  messages.push(req.body.profile)
  if (req.body.old_messages.length > 0) messages.push(...req.body.old_messages)

  messages.push(req.body.messages)

  try {
    const completion = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: messages,
      tools: tools,
    })

    console.log(`res => `, completion.choices[0].message)

    // Check if it needs to call a function/ call an API
    if (completion.choices[0].message.tool_calls && completion.choices[0].message.tool_calls.length > 0) {
      const toolCall = completion.choices[0].message.tool_calls[0]
      let result, completion2, args

      switch (completion.choices[0].message.tool_calls[0].function.name) {
        case 'create_token':
          console.log(`CREATE TOKEN`)
          args = JSON.parse(toolCall.function.arguments)
          console.log(args)
          result = await create_token(args)
          console.log(`result of create_token function => `, result)

          messages.push(completion.choices[0].message)

          messages.push({
            role: 'tool',
            tool_call_id: toolCall.id,
            content: JSON.stringify(result),
          })

          completion2 = await openai.chat.completions.create({
            model: 'gpt-4o-mini',
            messages,
            tools,
          })

          res.status(200).json({ output: completion2.choices[0].message })
          break
        case 'get_lsp7':
          args = JSON.parse(toolCall.function.arguments)
          result = await get_lsp7(args.contract)
          console.log(`get_lsp7 => `, result)

          messages.push(completion.choices[0].message)
          messages.push({
            role: 'tool',
            tool_call_id: toolCall.id,
            content: JSON.stringify(result),
          })

          completion2 = await openai.chat.completions.create({
            model: 'gpt-4o-mini',
            messages,
            tools,
          })
          res.status(200).json({ output: completion2.choices[0].message })
          break
        case 'get_total_holder':
          args = JSON.parse(toolCall.function.arguments)
          result = await get_total_holder(args.contract)
          console.log(`getTotalHolder => `, result)
          messages.push(completion.choices[0].message)
          messages.push({
            role: 'tool',
            tool_call_id: toolCall.id,
            content: JSON.stringify(result),
          })
          completion2 = await openai.chat.completions.create({
            model: 'gpt-4o-mini',
            messages,
            tools,
          })
          res.status(200).json({ output: completion2.choices[0].message })
          break
        case 'search_profile':
          args = JSON.parse(toolCall.function.arguments)
          result = await search_profile(args.wallet)
          console.log(result)

          messages.push(completion.choices[0].message) // append model's function call message
          messages.push({
            role: 'tool',
            tool_call_id: toolCall.id,
            content: JSON.stringify(result),
          })
          completion2 = await openai.chat.completions.create({
            model: 'gpt-4o-mini',
            messages,
            tools,
          })
          res.status(200).json({ output: completion2.choices[0].message })
          break
        default:
          res.status(200).json({ output: completion.choices[0].message })
          break
      }
    } else {
      res.status(200).json({ output: completion.choices[0].message })
    }
  } catch (err) {
    res.status(500).json({ error: 'failed to load data', message: err })
  }
}
